@use "sass:math";
@use "sass:string";
@use "styles/utils/variables";

@function get-container-width(
  $width,
  $spacing: to-rem(variables.$container-spacing)
) {
  @return $width + $spacing * 2;
}

@function to-rem($value) {
  @return math.div($value, 16px) * 1rem;
}

/* Reference: https://codepen.io/jakob-e/pen/doMoML */
@function svg-url($svg) {
  //  Add missing namespace
  @if not string.index($svg, xmlns) {
    $svg: str-replace($svg, "<svg", '<svg xmlns="http://www.w3.org/2000/svg"');
  }

  //  Chunk up string in order to avoid
  //  "stack level too deep" error
  $encoded: "";
  $slice: 2000;
  $index: 0;
  $loops: math.ceil(string.length($svg) / $slice);
  @for $i from 1 through $loops {
    $chunk: string.slice($svg, $index, $index + $slice - 1);

    //   Encode
    $chunk: str-replace($chunk, '"', "'");
    $chunk: str-replace($chunk, "%", "%25");
    $chunk: str-replace($chunk, "&", "%26");
    $chunk: str-replace($chunk, "#", "%23");
    $chunk: str-replace($chunk, "{", "%7B");
    $chunk: str-replace($chunk, "}", "%7D");
    $chunk: str-replace($chunk, "<", "%3C");
    $chunk: str-replace($chunk, ">", "%3E");
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml,#{$encoded}");
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: "") {
  $index: string.index($string, $search);
  @return if(
    $index,
    string.slice($string, 1, $index - 1) + $replace +
      str-replace(
        string.slice($string, $index + str-length($search)),
        $search,
        $replace
      ),
    $string
  );
}
